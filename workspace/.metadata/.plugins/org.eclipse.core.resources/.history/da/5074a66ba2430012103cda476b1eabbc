package editor;

import java.util.ArrayList;

import javax.swing.JOptionPane;

import com.jme3.app.SimpleApplication;
import com.jme3.asset.AssetManager;
import com.jme3.collision.CollisionResults;
import com.jme3.font.BitmapText;
import com.jme3.input.MouseInput;
import com.jme3.input.controls.ActionListener;
import com.jme3.input.controls.MouseButtonTrigger;
import com.jme3.light.AmbientLight;
import com.jme3.math.ColorRGBA;
import com.jme3.math.Ray;
import com.jme3.niftygui.NiftyJmeDisplay;
import com.jme3.scene.Geometry;
import com.jme3.scene.Node;
import com.jme3.scene.Spatial;
import com.jme3.system.JmeContext;

import de.lessvoid.nifty.Nifty;
import de.lessvoid.nifty.builder.LayerBuilder;
import de.lessvoid.nifty.builder.PanelBuilder;
import de.lessvoid.nifty.builder.ScreenBuilder;
import de.lessvoid.nifty.controls.button.builder.ButtonBuilder;
import de.lessvoid.nifty.screen.DefaultScreenController;


public class BasicRoomBuilder extends SimpleApplication{

	private static final String DEL_BLOCK = "Del Block";

	private static final String ADD_BLOCK = "Add Block";
	private static final String FIRST_TOOL = "First Tool";
	private static final String SECOUND_TOOL = "Secound Tool";

	/**
	 * @param args
	 */
	
	WallNode wallnode = new WallNode("wallnode");
	
	  private ActionListener actionListener = new ActionListener() {
		  
		    public void onAction(String name, boolean keyPressed, float tpf) {
		    	if (keyPressed)
		    		if (name.equals(FIRST_TOOL) || name.equals(SECOUND_TOOL))
		    		{
		    			CollisionResults results = new CollisionResults();
		    			Ray ray = new Ray(cam.getLocation(), cam.getDirection());
		    			wallnode.collideWith(ray, results);
		        	
		    			if (results.size() >0) {
		    				if (name.equals(DEL_BLOCK))
								useFirstTool(results.getCollision(0).getGeometry());
		        			if (name.equals(ADD_BLOCK)) useSecoundTool(results.getCollision(0).getGeometry());
		    		}
		    	}
		    }

			public void useSecoundTool(Geometry geo) {
				wallnode.removeBlock(RoomNode.getCoordsByGeometry(geo), assetManager,geo.getName());
			}

			public void useFirstTool(Geometry geo) {
				wallnode.addAndUpdate(new RoomNode(geo), assetManager);
			}
	  };
	
	
	public static void main(String[] args) {
		new BasicRoomBuilder().start();

	}
	@Override
    public void simpleUpdate(float tpf) {
	
    }
	
	public BasicRoomBuilder() {
		wallnode.openRoomEndDimensions[0] = Integer.parseInt(JOptionPane.showInputDialog("Enter length"))-2;
		wallnode.openRoomEndDimensions[1] = Integer.parseInt(JOptionPane.showInputDialog("Enter depth"))-2;
		wallnode.openRoomEndDimensions[2] = Integer.parseInt(JOptionPane.showInputDialog("Enter height"))-2;
		
		
		
	}


	private void initNodes() {
		rootNode.attachChild(wallnode);
		
		
	}

	@Override
	public void simpleInitApp() {
		initNodes();
		int[] startvalues = {0,0,0};
		int[] endvalues = {wallnode.openRoomEndDimensions[0]+1,wallnode.openRoomEndDimensions[1]+1,wallnode.openRoomEndDimensions[2]+1};
		wallnode.generateRoom(assetManager,startvalues, endvalues);
		
		AmbientLight ambient = new AmbientLight();
		ambient.setColor(ColorRGBA.White);
		rootNode.addLight(ambient);
		initCrossHairs();
		initTrigger();
		
	}

	private void initTrigger() {
		inputManager.addMapping(FIRST_TOOL, new MouseButtonTrigger(MouseInput.BUTTON_LEFT)); inputManager.addListener(actionListener, DEL_BLOCK);
		inputManager.addMapping(SECOUND_TOOL, new MouseButtonTrigger(MouseInput.BUTTON_RIGHT)); inputManager.addListener(actionListener, ADD_BLOCK);
		
	}

	void initCrossHairs() { 
	    guiFont = assetManager.loadFont("Interface/Fonts/Default.fnt");
	    BitmapText ch = new BitmapText(guiFont, false);
	    ch.setSize(guiFont.getCharSet().getRenderedSize() * 3);
	    ch.setText("+");       
	    ch.setLocalTranslation(settings.getWidth() / 2 - guiFont.getCharSet().getRenderedSize() *2/3, settings.getHeight()/2 + ch.getLineHeight() / 2, 0);
	    guiNode.attachChild(ch);
	  }
	

}
