package editor;

import java.util.ArrayList;

import javax.swing.JOptionPane;

import com.jme3.app.SimpleApplication;
import com.jme3.asset.AssetManager;
import com.jme3.light.AmbientLight;
import com.jme3.math.ColorRGBA;
import com.jme3.niftygui.NiftyJmeDisplay;
import com.jme3.scene.Node;
import com.jme3.scene.Spatial;

import de.lessvoid.nifty.Nifty;
import de.lessvoid.nifty.builder.LayerBuilder;
import de.lessvoid.nifty.builder.PanelBuilder;
import de.lessvoid.nifty.builder.ScreenBuilder;
import de.lessvoid.nifty.controls.button.builder.ButtonBuilder;
import de.lessvoid.nifty.screen.DefaultScreenController;


public class BasicRoomBuilder extends SimpleApplication{

	/**
	 * @param args
	 */
	
	WallNode wallnode = new WallNode("wallnode");
	
	public static void main(String[] args) {
		new BasicRoomBuilder().start();

	}
	
	RoomNode getOrCreateRoomNode(int x, int y, int z) {
		
		String NodeName = RoomNode.genName(x,y,z);
		RoomNode node =(RoomNode) wallnode.getChild(NodeName);
		if (node != null) return node;
		else {
			node = new RoomNode(x,y,z);
			wallnode.attachChild(node);
			return node;
		}
	}
	public BasicRoomBuilder() {
		wallnode.openRoomEndDimensions[0] = Integer.parseInt(JOptionPane.showInputDialog("Enter length"))-2;
		wallnode.openRoomEndDimensions[1] = Integer.parseInt(JOptionPane.showInputDialog("Enter depth"))-2;
		wallnode.openRoomEndDimensions[2] = Integer.parseInt(JOptionPane.showInputDialog("Enter height"))-2;
		
		
		
	}

	private void generateRoom() {
		
		for (int x=0; x<=wallnode.openRoomEndDimensions[0]+1; x++)
			for (int y=0; y<=wallnode.openRoomEndDimensions[1]+1; y++)
				for (int z=0; z<=wallnode.openRoomEndDimensions[2]+1; z++)  {
					if (!wallnode.isOpenRoom(x,y,z)) getOrCreateRoomNode(x, y, z);
				}
		for (Spatial s: wallnode.getChildren()) {
			((RoomNode) s).updateWall(wallnode, assetManager);
		}
		
		
	}

	private void initNodes() {
		rootNode.attachChild(wallnode);
		
		
	}

	@Override
	public void simpleInitApp() {
		initNodes();
		generateRoom();
		
		AmbientLight ambient = new AmbientLight();
		ambient.setColor(ColorRGBA.White);
		rootNode.addLight(ambient);
		
		initNifty();
	}

	private void initNifty() {
		NiftyJmeDisplay niftyDisplay = new NiftyJmeDisplay(
	            assetManager, inputManager, audioRenderer, guiViewPort);
	    Nifty nifty = niftyDisplay.getNifty();
	    guiViewPort.addProcessor(niftyDisplay);
	    flyCam.setDragToRotate(true);
	 
	    nifty.loadStyleFile("nifty-default-styles.xml");
	    nifty.loadControlFile("nifty-default-controls.xml");
	 
	    // <screen>
	    nifty.addScreen("Screen_ID", new ScreenBuilder("Hello Nifty Screen"){{
	        controller(new DefaultScreenController()); // Screen properties       
	 
	        // <layer>
	        layer(new LayerBuilder("Layer_ID") {{
	            childLayoutVertical(); // layer properties, add more...
	 
	            // <panel>
	            panel(new PanelBuilder("Panel_ID") {{
	               childLayoutCenter(); // panel properties, add more...               
	 
	                // GUI elements
	                control(new ButtonBuilder("Button_ID", "Hello Nifty"){{
	                    alignCenter();
	                    valignCenter();
	                    height("5%");
	                    width("15%");
	                }});
	 
	                //.. add more GUI elements here              
	 
	            }});
	            // </panel>
	          }});
	        // </layer>
	      }}.build(nifty));
	    // </screen>
	 
	    nifty.gotoScreen("Screen_ID"); // start the screen
	    

	}

	

}
