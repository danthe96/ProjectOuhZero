import com.jme3.math.Vector2f;
import com.jme3.scene.VertexBuffer.Type;
import com.jme3.math.Vector3f;
import com.jme3.scene.Mesh;
import com.jme3.scene.Node;
import com.jme3.util.BufferUtils;



public class RoomNode extends Node{

	static char CoordSeperator = ' ';
	private int x;
	private int y;
	private int z;
	
	static int [] indexes = { 2,0,1, 1,3,2 };
	static Vector2f[] texCoord = {new Vector2f(0,0),new Vector2f(1,0),new Vector2f(0,1),new Vector2f(1,1)};
	static int factor = 1;
	
	RoomNode(int x, int y, int z) {
		super(genName(x,y,z));
		this.x=x*factor;
		this.y=y*factor;
		this.z=z*factor;
	}
	
	public static String genName(int x, int y, int z) {
		
		return ""+x*factor+CoordSeperator+y*factor+CoordSeperator+z*factor;
	}
	
	public static String genName(int[] coords) {
		return genName(coords[0], coords[1], coords[2]);
	}

	public void updateWall(WallNode wallnode) {

		
		detachAllChildren();
		Mesh mesh = new Mesh();
		texCoord[0] = new Vector2f(0,0);
		texCoord[1] = new Vector2f(1,0);
		texCoord[2] = new Vector2f(0,1);
		texCoord[3] = new Vector2f(1,1);
		
		Vector3f [] vertices = new Vector3f[4];
		
		
		
		if (wallnode.isPlot(x, y-1, z)) {

			vertices[0] = new Vector3f(x,y,z);
			vertices[1] = new Vector3f(x+factor,y,z);
			vertices[2] = new Vector3f(x,y,z+factor);
			vertices[3] = new Vector3f(x+factor,y,z+factor);
			
			mesh.setBuffer(Type.Position, 3, BufferUtils.createFloatBuffer(vertices));
			mesh.setBuffer(Type.TexCoord, 2, BufferUtils.createFloatBuffer(texCoord));
			mesh.setBuffer(Type.Index,    3, BufferUtils.createIntBuffer(indexes));
			mesh.updateBound();
			
		}
		
		
		
		
		
	}
}
